"
"  ██╗   ██╗██╗███╗   ███╗██████╗  ██████╗
"  ██║   ██║██║████╗ ████║██╔══██╗██╔════╝
"  ██║   ██║██║██╔████╔██║██████╔╝██║
"  ╚██╗ ██╔╝██║██║╚██╔╝██║██╔══██╗██║
"   ╚████╔╝ ██║██║ ╚═╝ ██║██║  ██║╚██████╗
"     ╚═══╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝
"

if empty(glob('~/.config/vim/autoload/plug.vim'))
  silent !curl -fLo ~/.config/vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

source ~/.config/vim/plugins.vim

let mapleader=" "

" ================ THEME ========================

let g:gruvbox_contrast_dark = 'hard'
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
let g:gruvbox_invert_selection='0'
colorscheme gruvbox
set background=dark

set colorcolumn=80

" Sometimes I see the syntax be out of sync
noremap <F12> <Esc>:syntax sync fromstart<CR>
inoremap <F12> <C-o>:syntax sync fromstart<CR>
" endif
" hi Normal guibg=NONE ctermbg=NONE

" ================ General Config ====================
set clipboard=unnamedplus

""Mostrar los caracteres nulos
exec "set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~"
" Use a specific pipe ch
set fillchars+=vert:\┊
set list

let mapleader=" "

" Persist undo history between file editing sessions.
set undofile
set undodir=~/.vim/undodir

set number                          "Line numbers are good
set relativenumber
set cursorline                      "Highlight the line the cursor is on
set backspace=indent,eol,start      "Allow backspace in insert mode
set nocompatible                    "disable vi compatibility mode
set history=1000                    "Store lots of :cmdline history
set showcmd                         "Show incomplete cmds down the bottom
set gcr=a:blinkon0                  "Disable cursor blink
set visualbell                      "No sounds
set autoread                        "Reload files changed outside vim
set laststatus=2                    "Enabling statusline at all times
if &encoding != 'utf-8'
    set encoding=utf-8              "Necessary to show Unicode glyphs
endif
set spelllang=es,en
set noshowmode                      "Don't show the mode(airline is handling this)
set mouse=a                         "Mouse in terminal
set clipboard+=unnamedplus          "use system clipboard by default
set diffopt+=vertical               "prefer vertical diffs

set tw=79   " width of document (used by gd)
set fo-=t   " don't automatically wrap text when typing
set colorcolumn=80
""" numero de lineas visuales por TAB
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab
"" Autocomplete comandos
set wildmenu
"
"" Mostrar donde empieza y terminan brackets, etc
set showmatch
"
""buscar mientras escribo y resaltar
set incsearch
set ignorecase
set smartcase
"set gdefault

" Sane splits
set splitright
set splitbelow

" Wrapping options
set formatoptions=tc " wrap text and comments using textwidth
set formatoptions+=r " continue comments when pressing ENTER in I mode
set formatoptions+=q " enable formatting of comments with gq
set formatoptions+=n " detect lists for formatting
set formatoptions+=b " auto-wrap in insert mode, and do not wrap old long lines

""Molestos backup? para /tmp amiguitos
set nobackup
set nowritebackup
set noswapfile

" ================ Scrolling ========================

set scrolloff=8         "Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

highlight ColorColumn ctermbg=233

" ================ Indentation ======================

set autoindent
set smartindent
set smarttab

filetype indent plugin on

" Display tabs and trailing spaces visually
" set list listchars=trail:·,tab:┊\ ,extends:>,precedes:<,nbsp:·

set nowrap       "Don't wrap lines
set linebreak    "Wrap lines at convenient points


" ================ Folds ============================

set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default    

let javaScript_fold=1         " JavaScript
let perl_fold=1               " Perl
let php_folding=1             " PHP
let r_syntax_folding=1        " R
let ruby_fold=1               " Ruby
let sh_fold_enabled=1         " sh
let vimsyn_folding='af'       " Vim script
let xml_syntax_folding=1      " XML

" fuck this madnesss
nnoremap k gk
nnoremap j gj
cmap Q! q!

"hide chars
" map <leader>h :set list!<CR>
"" leader+space deja de mostrar el resultado de la busqueda
"nnoremap <leader><space> :nohlsearch<CR>

" I can type :help on my own, thanks.
map <F1> <Esc>
imap <F1> <Esc>

"toggle buffers
nnoremap <leader><leader> <c-^>

" Search results centered please
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

"search magic
nnoremap ? ?\v
nnoremap / /\v
cnoremap %s/ %sm/

" easier moving of code blocks
" Try to go into visual mode (v), thenselect several lines of code here and
" then press ``>`` several times.
vnoremap < <gv  " better indentation
vnoremap > >gv  " better indentation
" Save rapidito
noremap <silent> <C-S>          :w<CR>
vnoremap <silent> <C-S>         <C-C>:w<CR>
inoremap <silent> <C-S>         <C-O>:w<CR>


" Jump to last edit position on opening file
if has("autocmd")
  " https://stackoverflow.com/questions/31449496/vim-ignore-specifc-file-in-autocommand
  au BufReadPost * if expand('%:p') !~# '\m/\.git/' && line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif


nnoremap <leader>p :History<CR>
nnoremap <leader>t :Files<CR>
nnoremap <silent> <Leader>f :Rg<CR>
nnoremap <silent> <C-P> :Files<CR>
nmap ; :Buffers<CR>

" Marker concealment
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

vnoremap <leader>en :!python2 -c 'import sys,urllib;print urllib.quote(sys.stdin.read().strip())'<cr>
vnoremap <leader>de :!python2 -c 'import sys,urllib;print urllib.unquote(sys.stdin.read().strip())'<cr>

map dp :diffput<CR>
map dg :diffget<CR>
inoremap <silent><expr> <c-@> coc#refresh()
set updatetime=300

nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>

source ~/.config/vim/plugins-settings.vim

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'
"
" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

" Use <leader>x for convert visual selected code to snippet
xmap <leader>x  <Plug>(coc-convert-snippet)

au CursorHoldI,CursorMovedI * silent! call CocActionAsync('showSignatureHelp')
